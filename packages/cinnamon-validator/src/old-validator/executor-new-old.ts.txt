import { hasSubSchema, ValidationSchema } from "./schema/core";
import ValidationResult, {ValidationResultFail, ValidationResultSuccess} from "./result";

/**
 * An error thrown when a schema is invalid and thus cannot be used for validation.
 */
export class InvalidSchemaError extends Error {

    /**
     * The schema that caused the InvalidSchemaError.
     */
    public readonly schema: ValidationSchema;

    constructor(schema: ValidationSchema, message: string) {
        super(
            'The specified schema cannot be used because it is invalid.\n\n' +
            message + '\n\n' +
            'For more information, please refer to the Cinnamon Validator documentation.'
        );
    }

}

/**
 * A Validator performs validation on objects according to the schema provided to it when it was
 * initialized.
 *
 * You should use one Validator per schema, and ideally you should initialize one validator per
 * Cinnamon lifetime - you might find the constructor initializer feature useful when using
 * Validators in controllers.
 */
export class Validator {

    /**
     * The schema that this validator performs validation against.
     */
    public readonly schema: ValidationSchema;

    /**
     * Whether the schema on this executor is a single field (true) or an object (false)
     * (which may recursively define sub-schemas). This is automatically false for any
     * object.
     * @private
     */
    private readonly isSingleFieldSchema: boolean;

    /**
     * Initializes a Validator that will perform validations against the specified schema.
     * The schema for a given validator may not be changed. You should use one Validator
     * per schema. See the documentation on the {@link Validator} class itself.
     *
     * @param schema The schema to validate objects against.
     */
    constructor(schema: ValidationSchema) {
        if (typeof schema !== 'object') {
            throw new InvalidSchemaError(schema,
                `The specified schema has an invalid type: '${typeof schema}'. It must be an object.`
            );
        }

        this.schema = schema;
        this.isSingleFieldSchema = hasSubSchema(schema);
    }

    // public validate(value: any) : ValidationResultSuccess | ValidationResultFail {
    //
    // }

}
